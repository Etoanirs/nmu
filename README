neg4n's math utils
==================

this project is header-only
c++17 library written in modern way.

in order to use it, add nmu.hpp to your project
or get it through git submodules
feel free to contribute.

features:
 - two dimensional vector (2D) implementation with
   all arithmetic types support

preprocessor features:
 - define NMU_NO_GLOBALS to disable global typedefs
 - define NMU_USE_DEPRECATED to use deprecated
   functions like vec2_t.dot() and vec2_t.cross()

notes:
 - it is better to use dot_product(A, B) or cross_product(A, B)
   instead of vec2_t.dot(B) and vec2_t.cross(B) for better code readability

 documentation: soon.

sample code:
============

 #include "../nmu.hpp"

 int main( ) {
   vec2_t A;
   A = vec2_t{ 4.f, 3.f };

   printf( "x: %0.1f, y: %0.1f\n", A.x, A.y );
   printf( "is_valid(): %i\n", A.is_valid( ) );
   printf( "length(): %0.1f\n", A.length( ) );
   A.normalize( );
   printf( "[CALL] normalize();\n" );
   printf( "x: %0.1f, y: %0.1f\n", A.x, A.y );
   printf( "dot(): %0.1f\n", A.dot( vec2_t{ 5.f, 5.f } ) );
   printf( "dot_product(): %0.1f\n", dot_product<vec2_t>( A, vec2_t{ 5.f, 5.f } ) );
   printf( "cross_product(): %0.1f\n", cross_product<vec2_t>( A, vec2_t{ 5.f, 5.f } ) );

   A.clear( );
   printf( "[CALL] clear();\n" );
   printf( "x: %0.1f, y: %0.1f\n", A.x, A.y );
 }

compiled and tested using:
 - MSVC: yes (version: 19.24.28316.0)
 - clang: no
 - g++: no

disclaimer:
===========

this project:
 - sometimes does work,
 - may or may not contain gluten,
 - may or may not contain traces of nuts,
 - may or may not randomly injure people in a 15 meter radius, and
 - may or may not be safe for children under the age of 12

made on earth by human (under mit license)
